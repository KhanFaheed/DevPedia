query_set=ModelName.objects.Methods()
 Methods----all()->returns the entire queryset, get()--->returns an object ,filter()-->returns a query set, exclude-->returns query set

 Retrieving Objects:

all(): Returns all objects in the queryset. Usually the starting point for refining a query.
get(): Returns exactly one object. Raises ModelName.DoesNotExist if no object is found, or ModelName.MultipleObjectsReturned if more than one object is found. Use with caution!
filter(**kwargs): Returns a new queryset containing objects that match the given lookup conditions. This is the workhorse of querying.
exclude(**kwargs): Returns a new queryset containing objects that do not match the given lookup conditions.
first(): Returns the first object in the queryset, or None if the queryset is empty. Useful when you expect only one result or want to avoid exceptions.
last(): Returns the last object in the queryset, or None if the queryset is empty.
count(): Returns the number of objects in the queryset. Efficiently performed by the database.
exists(): Returns True if the queryset contains any objects, False otherwise. More efficient than count() > 0.


class Project(models.Model):
    owner=models.foreignkey(Profile,on_delete=Model.cascade) #this means that if we delete a user all the projects of that user will be deleted 
    #owner is a foreignkey to Profile model and similarly django creates a reverse relation called "profile_set"


1.Case: To access the profile object for a specific project
  project_obj=Project.objects.get(id=pk)

  profile=project_obj.owner

2.Case: to access the child object using the parent object like -> to acess the Project object using the Profile object

   profile_obj=Profile.object.get(id=pk)

   project=profile_obj.project_set.all


   Note->foreignkey is always on the manyside of the relationship



Authentication vs Authorization:
Authentication->To validate the users or to confirm who you are  [like Login system]  [Who the user is?]

Authorization->Grant or denies you permissions to acess a certain resources  [what an user can do on the website or resctring user based on their role on the website or the admin access][What all the user have access to?]


Session:Django has built in functionality for sessions and creates a session table as soon as we run our first migration and that session also sent ot the browser.

Session refers to a mechanism that allows you to store and Retrieve artbitrary data on a per-site-visitor basis. Essentialy, it's a way to maintain state between HTTP requests.

HTTP is stateless:
     1. The HTTP ptotocol ,which underlines the web, is inherently stateless. This means that each request from a browser to the server is independent of any previous requests.
     2.This statelessness makes it difficult to track user activity across multiple pages or requests.

Session provides state:
  1. Django's session framework solves this problem by providing a way to store user-specific data on the server.
  2.When a user visits  a Django Website , the server can create a session and assign a unique session ID to that user.
  3.This session ID is typically stored in a cookie on the user's browser.
  4.With each subsequent request from the same browser , the browser sends the session ID back to the server.
  5.The server can then use this session ID  to Retrieve the associated session data.[like a Login session]

  Key use case of sessions:
    1.User Authentication:Sessions are commonly used to store the login information,allowing the server  to recognise the Authenticated user.
    2.Shoping Carts:E-commerce websites uses sessions to store the items in a user's shoping carts.
    3.User preferences:Sessions can store user-specific stetings or preferences.
    4.Temporary data:Any sata that needs tobe stored temporarily between requests.

  Django Provides various options for stroing the session data:
     - database
     -Cache (eg. Memcached ,Redis)
     -Files

Example->Whenever a users is logged-in, the session id is stored on the server and the users browser cookies. 
        ->When the user is logged-out the session-id for that user is deleted from the browser's cookies.


        













     

